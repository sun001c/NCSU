{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"name":"LSTM Model AND Evaluation","provenance":[{"file_id":"1rzrb_gXdqwyEkyTtd5Nm8oSv27QULcCk","timestamp":1604937823868}],"collapsed_sections":[],"authorship_tag":"ABX9TyNhLfaYKQU8pGMvGrYoVllB"},"kernelspec":{"name":"python3","display_name":"Python 3"},"accelerator":"GPU"},"cells":[{"cell_type":"code","metadata":{"id":"xu0ZE0szjrrw","executionInfo":{"status":"ok","timestamp":1604937910525,"user_tz":300,"elapsed":23994,"user":{"displayName":"Jay Jagtap","photoUrl":"","userId":"09530331074054316271"}},"outputId":"219f5c4b-73d1-4439-a479-ea2529860aa0","colab":{"base_uri":"https://localhost:8080/"}},"source":["from google.colab import drive\n","drive.mount('/content/drive')"],"execution_count":null,"outputs":[{"output_type":"stream","text":["Mounted at /content/drive\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"0h3f9cMfdNbI"},"source":["## Required Imports\n","\n","import pandas as pd\n","import numpy as np\n","\n","pd.plotting.register_matplotlib_converters()\n","import matplotlib.pyplot as plt\n","%matplotlib inline\n","import seaborn as sns\n","\n","from sklearn.model_selection import train_test_split\n","from sklearn.metrics import classification_report\n","from sklearn.model_selection import GridSearchCV\n","\n","from sklearn.preprocessing import MinMaxScaler\n","\n","# Libraries for Classification and building Models\n","\n","from tensorflow.keras.models import Sequential\n","from tensorflow.keras.layers import Conv2D, Flatten, Dense, MaxPool2D, Dropout\n","from tensorflow.keras.utils import to_categorical \n","\n","from sklearn.ensemble import RandomForestClassifier\n","from sklearn.svm import SVC\\\n","\n","# Project Specific Libraries\n","\n","import os\n","import librosa\n","import librosa.display\n","import glob \n","import skimage\n","from tensorflow import keras\n","from keras import *\n"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"XoWZjsWCpjVN"},"source":["def get_data():\n","    data = np.load('/content/drive/My Drive/Colab Notebooks/ALDA Project/final_data.npz', allow_pickle=True)\n","    return data"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"M_S_oxkWpgIg"},"source":["def return_fold_train_test(fold_number):\n","  data = get_data()\n","  X = data['X']\n","  Y = data['Y']\n","  fold = data['fold'].astype(\"int32\")\n","  train_indices = np.argwhere(fold != fold_number).flatten()\n","  test_indices = np.argwhere(fold == fold_number).flatten()\n","\n","  train_X = X[train_indices]\n","  train_Y = Y[train_indices]\n","  test_X = X[test_indices]\n","  test_Y = Y[test_indices]\n","\n","  return train_X, train_Y, test_X, test_Y\n"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"x5ikvL_LsowV","executionInfo":{"status":"ok","timestamp":1604937929974,"user_tz":300,"elapsed":1095,"user":{"displayName":"Jay Jagtap","photoUrl":"","userId":"09530331074054316271"}},"outputId":"57a32113-b75e-4bf9-ceec-cf5e4af0fff0","colab":{"base_uri":"https://localhost:8080/"}},"source":["train_X, train_Y, test_X, test_Y = return_fold_train_test(11)\n","print(train_X.shape)\n","print(train_Y.shape)\n","print(test_X.shape)\n","print(test_Y.shape)"],"execution_count":null,"outputs":[{"output_type":"stream","text":["(8732, 128)\n","(8732, 10)\n","(0, 128)\n","(0, 10)\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"FEKrfvvupkPW"},"source":["# Define k fold cross validation on 10 folds as given with the dataset\n","\n","def kfold_cross_validation(model, epochs, batch_size, model_name=\"no_name_given\"):\n","  folds = np.arange(1,11,1).tolist()\n","  test_accuracy_by_fold = []\n","  predictions = []\n","  training_histories = []\n","\n","  import os\n","  model_dir = f\"/content/drive/My Drive/Colab Notebooks/ALDA Project/{model_name}\"\n","  if not os.path.exists(model_dir):\n","    os.makedirs(model_dir)\n","\n","  for fold in folds:\n","    train_X, train_Y, test_X, test_Y = return_fold_train_test(fold)\n","    if model_name==\"rcnn\":\n","      train_X_conv = train_X.reshape(train_X.shape[0],16,8,1)\n","      test_X_conv = test_X.reshape(test_X.shape[0],16,8,1)\n","      train_X_rnn = train_X.reshape(train_X.shape[0],128,1)\n","      test_X_rnn = test_X.reshape(test_X.shape[0],128,1)\n","      input_train = [train_X_conv, train_X_rnn]\n","      input_test = [test_X_conv, test_X_rnn]\n","    elif model_name ==\"lstm\":\n","      input_train = train_X.reshape(train_X.shape[0],128,1)\n","      input_test = test_X.reshape(test_X.shape[0],128,1)\n","\n","\n","    history = model.fit(input_train, train_Y, epochs=epochs, batch_size=batch_size, verbose=0)\n","    # training_histories.append(history)\n","    score = model.evaluate(input_test, test_Y, batch_size=batch_size)\n","    test_accuracy_by_fold.append(score[1])\n","    y_preds = model.predict(input_test)\n","\n","    predictions.append(y_preds)\n","    print(f\"Accuracy for fold_{fold}: \", score[1] )\n","    model.save(f\"/content/drive/My Drive/Colab Notebooks/ALDA Project/{model_name}/{model_name}_fold_{fold}.h5\")\n","\n","\n","  npz_name = f\"/content/drive/My Drive/Colab Notebooks/ALDA Project/{model_name}/{model_name}_predictions_and_accuaracy.npz\"\n","  np.savez(npz_name, accuracy = test_accuracy_by_fold, preds = predictions)\n","\n","  print(\"Accuracy: \", test_accuracy_by_fold)\n","  print(\"Average Accuracy over 10 folds = \", np.mean(np.array(test_accuracy_by_fold)))\n","\n","  return test_accuracy_by_fold\n","                      "],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"-2pRt7FGdXdK","executionInfo":{"status":"ok","timestamp":1604937931276,"user_tz":300,"elapsed":353,"user":{"displayName":"Jay Jagtap","photoUrl":"","userId":"09530331074054316271"}},"outputId":"c7e1e617-f618-4159-e6f0-b400ecf3d509","colab":{"base_uri":"https://localhost:8080/"}},"source":["\n","data = get_data()\n","X = data['X']\n","Y = data['Y']\n","\n","print(X.shape)\n","print(Y.shape)\n","print(\"Data loaded successfully\")"],"execution_count":null,"outputs":[{"output_type":"stream","text":["(8732, 128)\n","(8732, 10)\n","Data loaded successfully\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"07rC_bjvd7XL","executionInfo":{"status":"ok","timestamp":1604937932070,"user_tz":300,"elapsed":320,"user":{"displayName":"Jay Jagtap","photoUrl":"","userId":"09530331074054316271"}},"outputId":"81a95a4f-6c39-4fca-860d-ec5bc87f62ab","colab":{"base_uri":"https://localhost:8080/"}},"source":["X_train, X_test, Y_train, Y_test = train_test_split(X, Y, random_state = 1)\n","\n","print(X_train.shape)\n","print(X_test.shape)\n","print(Y_train[0])\n","\n","#input shape = time*features\n","input_shape = (128,1)\n","X_train = X_train.reshape(X_train.shape[0], 128,1)\n","X_test = X_test.reshape(X_test.shape[0], 128,1)\n","\n","print(X_train.shape)\n","print(X_test.shape)\n","print(Y_train.shape)\n","\n","print(Y_train.shape)\n","print(type(Y_train))"],"execution_count":null,"outputs":[{"output_type":"stream","text":["(6549, 128)\n","(2183, 128)\n","[0. 0. 0. 0. 0. 0. 0. 0. 0. 1.]\n","(6549, 128, 1)\n","(2183, 128, 1)\n","(6549, 10)\n","(6549, 10)\n","<class 'numpy.ndarray'>\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"7oqKCE0deOBy"},"source":["from keras.models import *\n","from keras.layers import *"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"iv2Brig9d_Oy"},"source":["def LSTMModel():\n","  model = Sequential()\n","  model.add(LSTM(units=100, input_shape=(128, 1), return_sequences=True))\n","  model.add(Dropout(rate=0.4))\n","  model.add(LSTM(units=100))\n","  model.add(Dropout(rate=0.4))\n","  model.add(Dense(128, activation='relu'))\n","  model.add(Dense(10, activation='softmax'))\n","  model.compile(loss='categorical_crossentropy', optimizer='adam', metrics=[\"categorical_accuracy\"])\n","  return model\n"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"CyTIMZaQeBeL","executionInfo":{"status":"ok","timestamp":1604952808396,"user_tz":300,"elapsed":1019,"user":{"displayName":"Jay Jagtap","photoUrl":"","userId":"09530331074054316271"}},"outputId":"1820741d-215a-4746-fd8e-128638b13110","colab":{"base_uri":"https://localhost:8080/"}},"source":["model = LSTMModel()\n","model.summary()"],"execution_count":null,"outputs":[{"output_type":"stream","text":["Model: \"sequential_1\"\n","_________________________________________________________________\n","Layer (type)                 Output Shape              Param #   \n","=================================================================\n","lstm (LSTM)                  (None, 128, 100)          40800     \n","_________________________________________________________________\n","dropout (Dropout)            (None, 128, 100)          0         \n","_________________________________________________________________\n","lstm_1 (LSTM)                (None, 100)               80400     \n","_________________________________________________________________\n","dropout_1 (Dropout)          (None, 100)               0         \n","_________________________________________________________________\n","dense (Dense)                (None, 128)               12928     \n","_________________________________________________________________\n","dense_1 (Dense)              (None, 10)                1290      \n","=================================================================\n","Total params: 135,418\n","Trainable params: 135,418\n","Non-trainable params: 0\n","_________________________________________________________________\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"s4ADGDZypHoO","executionInfo":{"status":"ok","timestamp":1604952833862,"user_tz":300,"elapsed":555,"user":{"displayName":"Jay Jagtap","photoUrl":"","userId":"09530331074054316271"}},"outputId":"5f714e53-e9cd-4dbc-fb50-bc17f1f1f437","colab":{"base_uri":"https://localhost:8080/","height":661}},"source":["keras.utils.plot_model(model, \"lstm.png\")"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"image/png":"\n","text/plain":["<IPython.core.display.Image object>"]},"metadata":{"tags":[]},"execution_count":9}]},{"cell_type":"code","metadata":{"id":"sxvuRhBOeEAR"},"source":["model.compile(\n","    loss='categorical_crossentropy', optimizer='adam', metrics=['categorical_accuracy']\n",")"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"txU-yhh1eU12"},"source":["history = model.fit(X_train, Y_train, batch_size=32, epochs=200)"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"3Lh1ZWMMeXNY"},"source":["predictions = model.predict(X_test)\n","score = model.evaluate(X_test, Y_test)\n","print(score)"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"rEFEXhrhsa8c"},"source":["def parallel_RCNN():\n","  input_dim_conv = Input(shape=(16,8,1))\n","  input_dim_RNN = Input(shape=(128,1))\n","\n","  # COnvolutional Model\n","  conv_1 = Conv2D(128, (3, 3), padding = \"same\", activation = \"tanh\")(input_dim_conv)\n","  max_pool_1 = MaxPool2D(pool_size=(2, 2))(conv_1)\n","  conv_2 = Conv2D(64, (3, 3), padding = \"same\", activation = \"tanh\")(max_pool_1)\n","  conv_flatten = GlobalMaxPooling2D()(conv_2) \n","\n","  # LSTM Model\n","  lstm_1 = LSTM(units=100, return_sequences=True)(input_dim_RNN)\n","  dropout_1 = Dropout(rate=0.4)(lstm_1)\n","  lstm_2 = LSTM(units=100)(dropout_1)\n","  dense_rnn = Dense(128, activation='relu')(lstm_2)\n","  rnn_flatten = Flatten()(lstm_2)\n","\n","  concat_layer = concatenate([conv_flatten, rnn_flatten])\n","\n","  # Fully connected NN\n","  dense_1 = Dense(128, activation='relu')(concat_layer)\n","  logits = Dense(10, activation='softmax')(dense_1) \n","\n","  model = Model(inputs=[input_dim_conv, input_dim_RNN], outputs=logits)\n","  model.compile(\n","    loss='categorical_crossentropy', optimizer=keras.optimizers.Adam(lr=0.001), metrics=['categorical_accuracy']\n","  ) \n","\n","  return model\n"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"A7gk0r2csfmr","executionInfo":{"status":"ok","timestamp":1604936867583,"user_tz":300,"elapsed":979,"user":{"displayName":"Jay Jagtap","photoUrl":"","userId":"09530331074054316271"}},"outputId":"94104032-7cdd-4123-b724-58552e0640c6","colab":{"base_uri":"https://localhost:8080/"}},"source":["rcnn = parallel_RCNN()\n","rcnn.summary()"],"execution_count":null,"outputs":[{"output_type":"stream","text":["Model: \"functional_9\"\n","__________________________________________________________________________________________________\n","Layer (type)                    Output Shape         Param #     Connected to                     \n","==================================================================================================\n","input_11 (InputLayer)           [(None, 16, 8, 1)]   0                                            \n","__________________________________________________________________________________________________\n","input_12 (InputLayer)           [(None, 128, 1)]     0                                            \n","__________________________________________________________________________________________________\n","conv2d_10 (Conv2D)              (None, 16, 8, 128)   1280        input_11[0][0]                   \n","__________________________________________________________________________________________________\n","lstm_8 (LSTM)                   (None, 128, 100)     40800       input_12[0][0]                   \n","__________________________________________________________________________________________________\n","max_pooling2d_5 (MaxPooling2D)  (None, 8, 4, 128)    0           conv2d_10[0][0]                  \n","__________________________________________________________________________________________________\n","dropout_4 (Dropout)             (None, 128, 100)     0           lstm_8[0][0]                     \n","__________________________________________________________________________________________________\n","conv2d_11 (Conv2D)              (None, 8, 4, 64)     73792       max_pooling2d_5[0][0]            \n","__________________________________________________________________________________________________\n","lstm_9 (LSTM)                   (None, 100)          80400       dropout_4[0][0]                  \n","__________________________________________________________________________________________________\n","global_max_pooling2d_4 (GlobalM (None, 64)           0           conv2d_11[0][0]                  \n","__________________________________________________________________________________________________\n","flatten_4 (Flatten)             (None, 100)          0           lstm_9[0][0]                     \n","__________________________________________________________________________________________________\n","concatenate_4 (Concatenate)     (None, 164)          0           global_max_pooling2d_4[0][0]     \n","                                                                 flatten_4[0][0]                  \n","__________________________________________________________________________________________________\n","dense_13 (Dense)                (None, 128)          21120       concatenate_4[0][0]              \n","__________________________________________________________________________________________________\n","dense_14 (Dense)                (None, 10)           1290        dense_13[0][0]                   \n","==================================================================================================\n","Total params: 218,682\n","Trainable params: 218,682\n","Non-trainable params: 0\n","__________________________________________________________________________________________________\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"laBxyzNd01TT"},"source":["keras.utils.plot_model(rcnn, \"my_first_model.png\")"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"GWR4hPa30Pnm","executionInfo":{"status":"ok","timestamp":1604936880706,"user_tz":300,"elapsed":447,"user":{"displayName":"Jay Jagtap","photoUrl":"","userId":"09530331074054316271"}},"outputId":"c001f664-eb0e-4676-b18c-382fef1d7aaa","colab":{"base_uri":"https://localhost:8080/"}},"source":["data = get_data()\n","X = data['X']\n","Y = data['Y']\n","X_train, X_test, Y_train, Y_test = train_test_split(X, Y, random_state = 11)\n","input_conv = X_train.reshape(X_train.shape[0],16,8,1)\n","input_rnn = X_train.reshape(X_train.shape[0],128,1)\n","print(input_conv.shape)\n","print(input_rnn.shape)\n","input_conv_test = X_test.reshape(X_test.shape[0],16,8,1)\n","input_rnn_test = X_test.reshape(X_test.shape[0],128,1)\n"],"execution_count":null,"outputs":[{"output_type":"stream","text":["(6549, 16, 8, 1)\n","(6549, 128, 1)\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"VZm6etAbxJEG","executionInfo":{"status":"ok","timestamp":1604936893931,"user_tz":300,"elapsed":6588,"user":{"displayName":"Jay Jagtap","photoUrl":"","userId":"09530331074054316271"}},"outputId":"48e12e9b-3add-4d65-dfdf-d73e9b83d832","colab":{"base_uri":"https://localhost:8080/"}},"source":["rcnn.fit(x=[input_conv, input_rnn ], y = Y_train, epochs=2, batch_size=64)"],"execution_count":null,"outputs":[{"output_type":"stream","text":["Epoch 1/2\n","103/103 [==============================] - 2s 17ms/step - loss: 1.7904 - categorical_accuracy: 0.3770\n","Epoch 2/2\n","103/103 [==============================] - 2s 15ms/step - loss: 1.4153 - categorical_accuracy: 0.5155\n"],"name":"stdout"},{"output_type":"execute_result","data":{"text/plain":["<tensorflow.python.keras.callbacks.History at 0x7f23a17521d0>"]},"metadata":{"tags":[]},"execution_count":31}]},{"cell_type":"code","metadata":{"id":"SFXujBov8qCq","executionInfo":{"status":"ok","timestamp":1604936899458,"user_tz":300,"elapsed":1815,"user":{"displayName":"Jay Jagtap","photoUrl":"","userId":"09530331074054316271"}},"outputId":"7dd84d52-48ad-4936-f53b-bcbc404d90be","colab":{"base_uri":"https://localhost:8080/"}},"source":["score = rcnn.evaluate([input_conv_test,input_rnn_test], Y_test)\n","score"],"execution_count":null,"outputs":[{"output_type":"stream","text":["69/69 [==============================] - 1s 9ms/step - loss: 1.3432 - categorical_accuracy: 0.5497\n"],"name":"stdout"},{"output_type":"execute_result","data":{"text/plain":["[1.3431832790374756, 0.5497022271156311]"]},"metadata":{"tags":[]},"execution_count":32}]},{"cell_type":"code","metadata":{"id":"PfIiAPLo-I8y","executionInfo":{"status":"ok","timestamp":1604947478463,"user_tz":300,"elapsed":2693966,"user":{"displayName":"Jay Jagtap","photoUrl":"","userId":"09530331074054316271"}},"outputId":"80f5a044-af23-4574-ca0d-b59b0375a25a","colab":{"base_uri":"https://localhost:8080/"}},"source":["if __name__ == \"__main__\":\n","  lstm = LSTMModel()\n","  kfold_cross_validation(lstm,epochs=100, batch_size=32 ,model_name=\"lstm\")\n"],"execution_count":null,"outputs":[{"output_type":"stream","text":["28/28 [==============================] - 0s 6ms/step - loss: 3.2432 - categorical_accuracy: 0.3895\n","Accuracy for fold_1:  0.3894616365432739\n","28/28 [==============================] - 0s 6ms/step - loss: 1.7661 - categorical_accuracy: 0.6171\n","Accuracy for fold_2:  0.6171171069145203\n","29/29 [==============================] - 0s 6ms/step - loss: 1.2720 - categorical_accuracy: 0.7135\n","Accuracy for fold_3:  0.7135134935379028\n","31/31 [==============================] - 0s 6ms/step - loss: 0.8667 - categorical_accuracy: 0.7970\n","Accuracy for fold_4:  0.7969697117805481\n","30/30 [==============================] - 0s 6ms/step - loss: 0.2577 - categorical_accuracy: 0.9263\n","Accuracy for fold_5:  0.9262820482254028\n","26/26 [==============================] - 0s 6ms/step - loss: 0.2212 - categorical_accuracy: 0.9356\n","Accuracy for fold_6:  0.9356014728546143\n","27/27 [==============================] - 0s 6ms/step - loss: 0.2694 - categorical_accuracy: 0.9391\n","Accuracy for fold_7:  0.939140796661377\n","26/26 [==============================] - 0s 6ms/step - loss: 0.2074 - categorical_accuracy: 0.9355\n","Accuracy for fold_8:  0.9354838728904724\n","26/26 [==============================] - 0s 6ms/step - loss: 0.1498 - categorical_accuracy: 0.9645\n","Accuracy for fold_9:  0.9644607901573181\n","27/27 [==============================] - 0s 6ms/step - loss: 0.2038 - categorical_accuracy: 0.9462\n","Accuracy for fold_10:  0.9462365508079529\n","Accuracy:  [0.3894616365432739, 0.6171171069145203, 0.7135134935379028, 0.7969697117805481, 0.9262820482254028, 0.9356014728546143, 0.939140796661377, 0.9354838728904724, 0.9644607901573181, 0.9462365508079529]\n","Average Accuracy over 10 folds =  0.8164267480373383\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"_HY3xm91qTNA"},"source":[""],"execution_count":null,"outputs":[]}]}